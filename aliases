function updatenews() {
    pushd .>/dev/null
    cd /svn/svnroot/
    git log --graph --pretty=format:'%C(auto)%h%d (%ci) %s'|grep -e 🐛 -e 💡>Changelog.md
}
updatenews
function newfeatures() {
if [ "$1" == "load" ]; then
	pushd . >/dev/null
	cd /svn/svnroot/
	(
	git log|grep 💡|head -n25
	git log|grep 🐛|head -n25
	)> ~/tmp/newfeatures
	popd > /dev/null
else
	cat ~/tmp/newfeatures|shuf -n1
fi
}
newfeatures load
function hmm() {
fn=$(
(
echo NEW
ls -t */.*.hmm 2>/dev/null)|fzf --header="Chose mindmap")
if [ "$fn" == "" ]; then
	return
fi
if [ "$fn" == "NEW" ]; then
	echo -n "Type mindmap name: ";
	read name
	fn="~/.$name.hmm"
fi
echo fn=$fn
/svn/svnroot/Applications/h-m-m "$fn"
}
alias adjust="adjustbalance=1 php /svn/svnroot/Applications/mkentry.php"
alias letregnskab="php /svn/svnroot/Applications/letregnskab.php"
function upd8() {
    pushd . >/dev/null
    cd /svn/svnroot
    git pull 
    popd > /dev/null
}
function b() {
depth=$(echo -e "1\n2"|fzf --header="Choose depth")
if [ "$depth" == ""]; then return; fi
acc=$(php /svn/svnroot/Applications/newl.php accounts --depth=$depth|fzf --ansi)
if [ "$acc" == "" ]; then
	return
fi
php /svn/svnroot/Applications/newl.php b ^"$acc" --flat

}
function bilag() { 
	pushd 2>/dev/null
	if [ "$kddir" == "" ]; then
		echo "set customer dir first with kd"
		return
	fi
	if [ ! -f "$kddir/.nextbilag" ]; then
		echo -n "Start at bilag number: "
		read bilag
		echo -n $bilag > "$kddir/.nextbilag"
	else
		bilag=$(cat "$kddir/.nextbilag")
	fi
	curbilag=$((
	ls -t|sort -r|grep -i .pdf
	ls -t|sort -r |grep -i .png
	ls -t |sort -r|grep -i .jpg
	)|head -n1)
	sixel "$curbilag" $1
	extension="${curbilag#*.}"
	echo "Brug $curbilag som $bilag (j/n): "
	stty -icanon -echo
	read valg
	stty sane
	if [ "$valg" == "j" ]; then
		mv "$curbilag" "$kddir/Bilag/$bilag - $curbilag"
		((bilag++))
		echo -n $bilag > "$kddir/.nextbilag"
	else
		touch "$curbilag"
	fi
}

function sixel() {
	mkdir -p ~/tmp/sixout
	rm ~/tmp/sixout/* -f
	convert -quality 90 -density 150 "$1" ~/tmp/sixout/out.jpg
	/svn/svnroot/Applications/vv  --preview-size=500 -f ~/tmp/sixout/*
#  -P, --preview-size=PIXELS     # Set height of previews (pixels). (264).                 │
  #-p, --preview-lines=LINES     # Same, but specify in lines of text. (8).
}
source /svn/svnroot/Libraries/aliases
function symbols() {
fn=$(find $tpath/.tags/.*.sym|fzf)
vi "$fn"
}
alias o="bash /svn/svnroot/Applications/journalviewer.bash"

alias colorize="n4s_setcolors=1 n4s_colorset=1 l b"
alias colorizetransactions="n4s_setcolors=1 n4s_colorset=1 l r"
function nmenu() {
    valg=$(php /svn/svnroot/Applications/menu.php)
    if [ "$valg" != "" ]; then
        php /svn/svnroot/Applications/menu.php "$valg"
    fi
}
alias bookledger="php /svn/svnroot/Applications/newl.php book"
function fejl() {
    fn="$(cat $tpath/.log|fzf --tac)"
    echo "Valgt fejl: $fn"
    fn="$(echo "$fn"|awk '{print $NF}')"
    tmux split-window -v "vi \"$fn\""
}
function updatebudget() {
    if [ "$tpath" == "" ];  then
        echo "updatebudget kræver tpath"
        return
    fi
    acc=$(cat $tpath/.budgetkonto 2>/dev/null)
    acc=$(php /svn/svnroot/Applications/newl.php accounts|grep -v ^Fejl|grep -v ^Egenkapital:|grep -v ^Udgifter|grep -v ^Indtægter|grep -v ^Resultatdisponering|fzf --ansi --header="Vælg konto til fremskrivning" --query="$acc")
    echo -n "$acc" > $tpath/.budgetkonto
    pushd . >/dev/null
    gobackmonths=$(cat $tpath/.budgetgobackmonths 2>/dev/null)
    if [ "$gobackmonths" == "" ]; then
        gobackmonths=6
    fi
    echo -n "Indtast måneder tilbage fra nu til beregningsgrundlag ($gobackmonths): "
    read gbm
    if [ "$gbm" != "" ]; then
        gobackmonths=$gbm
    fi
    export gobackmonths
	budgetstart=$(date +%Y-%m-%d)
    budgetstart=$(cat $tpath/.budgetstart 2>/dev/null)
    if [ "$budgetstart" == "" ]; then
        budgetstart=$(date +%Y-%m-%d)
    fi
	echo -n "Indtast startdato for rullende budget ($budgetstart): "
	read bs
	if [ "$bs" != "" ]; then
		budgetstart=$bs
	fi
    export budgetstart
    forecast=$(cat $tpath/.forecastlength 2>/dev/null)
    if [ "$forecast" == "" ]; then
        forecast=12
    fi
	echo -n "Antal måneders forecast ($forecast): "
	read fc
	if [ "$fc" != "" ]; then
		forecast=$fc
	fi
    export forecast
    php /svn/svnroot/Applications/rullendebudget.php > $tpath/.budget.ledger
    popd >/dev/null
    export budget=1
    echo Du kan nu se posteringer i fremtidige perioder $forecast måneder ud i fremtiden baseret på gennemsnit
}
isYYYYMMDDdate() {
  [[ "$1" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]] && [[ "$1" == $(date -r $(date -j -f "%Y-%m-%d" "$1" "+%s") '+%Y-%m-%d') ]] &> /dev/null; echo "$?"
}
alias aliases="updatealiases=1 php /svn/svnroot/Applications/newl.php b > /dev/null"
logging=on
function log() {
    echo -n "Indtast evt. søgefrase eller tryk enter for at vise alle logs: "
    read search
    if [ "$search" == "" ]; then
        vi $tpath/.logs/$(ls $tpath/.logs -t|fzf)
    else
        valg=$(cd $tpath;grep -lri "$search" .logs|fzf)
        vi "$valg"
    fi
}
alias åbneposter="php /svn/svnroot/Applications/newl.php openentries"
alias mutt="ssh -t localhost -p8888 mutt"
alias spks="u http://spks.dk"
function skat() {
site=$(echo -e "Borger\nErhverv"|fzf --header="Vælg side")
if [ "$site" == "Borger" ]; then
    u "https://www.tastselv.skat.dk/part/login"
else
    u "https://pdcs.skat.dk/dcs-atn-gateway/login/tsk"
fi
}
function u() {
ssh -p 8888 localhost DISPLAY=:1 xdg-open "$1" 2>/dev/null
}
alias register="php /svn/svnroot/Applications/register.php"
alias r=register
alias autoudlign="php /svn/svnroot/Applications/newl.php openentries"
alias ui="php /svn/svnroot/Applications/newl.php ui"
function lt() {
 vi $(realpath $tpath/.lasttrans )
}
alias fp=" python /svn/svnroot/Applications/fpaste/fpaste.py"
version=$(cd /svn/svnroot/;echo $(git log |wc -l)/1000|bc -l|perl -pe 's/ ^0+ | 0+$ //xg')
export TERM=xterm-256color tmux
export BORG_RELOCATED_REPO_ACCESS_IS_OK=y
function h() {
l r $@|head
}
function t() {
l r $@|tail
}
function kd() {
	path=$(echo ~/Dropbox/"$(ls ~/Dropbox|fzf)")
    echo "$path" > ~/tmp/.curbpath
    cd "$path"
	export kddir=$path
}
function i() {
	cd Bilag/Incoming
	path=$PWD
    echo "$path" > ~/tmp/.curbpath
}
function convertimages() {
ls *.jpg *.png *.JPG *.PNG 2>/dev/null|while read i
do
    echo "Konverterer $i til pdf"
    filemtime=$(stat -c %Y "$i")
    img2pdf --rotation=ifvalid "$i" -o "$i.pdf" && rm "$i" && touch -d @$filemtime "$i.pdf"
    done
}
op=$(whoami)
alias p="tmux split -h \"w3m -dump /home/$op/tmp/ft.html|vi - \""
alias v="bash /svn/svnroot/Applications/viewpdf.bash $@"
alias 111="tmux send-keys 'l b ^Indtægter: ^Udgifter' Enter"
alias 320="tmux send-keys 'l b ^Indtægter:' Enter"
alias 115="tmux send-keys ' l b ^ind ^ud --depth=2' Enter 'python' Enter"
alias 325="tmux send-keys ' l b ^ind ^ud --depth=2' Enter 'python' Enter "
alias 326="tmux send-keys 'l b afskrivning' Enter"
alias 327="tmux send-keys ' l b ^ind ^ud --depth=2' Enter "
alias 123="tmux send-keys 'period=yearly ppivot Egenkapital:' Enter"
alias 331="tmux send-keys 'period=yearly ppivot Egenkapital:' Enter"
alias 124="tmux send-keys 'period=yearly ppivot Aktiver:' Enter"
alias 332="tmux send-keys 'period=yearly ppivot Aktiver:' Enter"
alias 356="tmux send-keys 'period=yearly ppivot Udgifter:Administration:Mindre' Enter"
alias 638="tmux send-keys 'period=yearly ppivot Passiver:Moms:' Enter"
alias aktiver="tmux send-keys 'period=yearly ppivot ^Aktiver:' Enter"
alias passiver="tmux send-keys 'period=yearly ppivot ^Passiver:' Enter"
alias udgifter="tmux send-keys 'period=yearly ppivot ^Udgifter:' Enter"
alias indtægter="tmux send-keys 'period=yearly ppivot ^Indtægter:' Enter"
alias egenkapital="tmux send-keys 'period=yearly ppivot ^Egenkapital:' Enter"

export LEDGER_SORT=date
function pivot() {
bash /svn/svnroot/Applications/hpivot.bash $@
}
alias ppivot="LEDGER_BEGIN=1900-1-1 LEGDER_END=2099-12-31 bash /svn/svnroot/Applications/hpivot.bash $@"

mkdir -p ~/n4s-sockets/
export TMUX_TMPDIR=~/n4s-sockets/
alias budget="bash /svn/svnroot/Applications/budget.bash"
transfer() {
    curl --progress-bar --upload-file "$1" https://transfer.sh/$(basename $1) | tee /dev/null;
}
export termcmd=terminal
function changetermcmd() {
	export termcmd=$(echo -e "display-popup -E\nterminal\nnew-window\nsplit-window -h\nsplit-window -v"|fzf --exact --height=9 --header="Vælg output")
}
export LEDGER_PAYEE_WIDTH=60
export LEDGER_ACCOUNT_WIDTH=36
export LEDGER_AMOUNT_WIDTH=12
export LEDGER_TOTAL_WIDTH=12

alias reconcile="php /svn/svnroot/Applications/bankreconcile.php"
alias debtorreport="/svn/svnroot/Applications/browsedebitors.bash"
function dp() {
    bn=$(basename "$tpath")
	php /svn/svnroot/Applications/datepick.php
	source ~/tmp/.datepick_$bn
	end=$LEDGER_BEGIN
	lastsym 🕒
	begin=1900-01-01 
    tmux split-window -l2 -v "cd $tpath; tpath=$tpath LEDGER_DEPTH=999 LEDGER_BEGIN=$begin LEDGER_END=$end noend=1 php /svn/svnroot/Applications/newl.php csv|LEDGER_BEGIN=$LEDGER_BEGIN tpath=$tpath php /svn/svnroot/Applications/calcopening.php"
    tmux last-pane
    tmux split-window -l1 -v "echo -n $(basename "$tpath"): Henter kontoplan;cd $tpath; tpath=$tpath LEDGER_DEPTH=999 LEDGER_END=2099-12-31 LEDGER_BEGIN=1900-01-01 noend=1 php /svn/svnroot/Applications/newl.php accounts > $tpath/.accounts.tmp;cp $tpath/.accounts.tmp $tpath/.accounts;rm $tpath/.accounts.tmp;clear;echo -n Kontoplan hentet;sleep 1"
    tmux last-pane
}
function ds() {
	php /svn/svnroot/Applications/sortpick.php
	source ~/tmp/.sortpick
}
function m() {
	if [ "$tpath" != "" ]; then
		php /svn/svnroot/Applications/tmux/menu.php rmenu

	else
		echo "Kan ikke åbne menu før valg af regnskab. Skriv 'sr' for at vælge regnskab"
		return
	fi
}
function lm() {

	if [ "$tpath" != "" ]; then
		php /svn/svnroot/Applications/tmux/menu.php Ledger
		tmux display-popup -w 55 -h 12 -E "whiptail --inputbox Konto 7 50 > ~/tmp/whiptail.out"
		tmux send-keys "'$(echo -n $(cat ~/tmp/whiptail.out))' Enter"

	else
		echo "Kan ikke åbne menu før valg af regnskab. Skriv 'sr' for at vælge regnskab"
		return
	fi
}
bind '"\em":"m\n"' 2>/dev/null
bind '"\eå":"lm\n"' 2>/dev/null
bind '"\er":"r\n"' 2>/dev/null
bind '"\eb":"b\n"' 2>/dev/null
bind '"\ep":"dp\n"' 2>/dev/null
bind '"\es":"ds\n"' 2>/dev/null
bind '"\eo":"o\n"' 2>/dev/null
bind '"\eq":"changetermcmd\n"' 2>/dev/null
shopt -s histappend
mkdir -p ~/tmp/ /svn/svnroot/tmp/
LEDGER_DEPTH=5
function ti() {
	time=$(date +"%H:%m")
	#tmux set -g status-right "#[fg=white]# $time: $1"
}
function ww() {
tmux select-window -t $(tmux list-windows|fzf|awk '{print $1}'|sed 's/://g') 
}
logfile_o="/var/log/olsen"

source /svn/svnroot/Applications/key_tas.bash
function x() {
if [ "$STY" != "" ]; then
	echo du er allerede i en STY $STY
	return
fi
session=$((screen -ls|grep -v There" are"|grep -v Sockets;echo "NY")|fzf|awk '{print $1}')
if [ "$session" == "NY" ] || [ "$session" == "ny" ]; then
	#echo -n "Indtast ny aktivitets navn: "
	#read name
	tag=$(ls /home/joo/regnskaber/transactions_stuff/.tags/|fzf)
	#source /home/joo/regnskaber/transactions_stuff/.tags.bash
	#tag=$(tpath=/home/joo/regnskaber/transactions_stuff gettags|fzf)
	if [ "$tag" == "noter" ]; then
		screen -c $screenrc -S "noter" vi ~/Noter.txt
	else
		screen -c $screenrc -S "$tag" 
	fi
else
	if [[ "$session" =~ *"noter"* ]]; then
		screen -c $screenrc. -x $session 
	else
		screen -c $screenrc -x $session 
	fi
fi

}



function oll() {
(grep -i "$1" ~/t/*/1000" - "*
grep -i "$1" ~/pr/*/1000" - "*
grep -i "$1" ~/companies/*/1000" - "*
grep -i "$1" ~/p/*/1000" - "*
)|while read i; do 
	b=$(basename "$i"); 
	fn=$(echo -n "$i"|sed "s/$b//g"; echo -n "100000 - History")
	if [ -f "$fn" ]; then
		echo "### $fn ###"
		cat "$fn"
	fi
done|less
}
alias ta="task add" 
current_year=$(date +%Y)
next_year=$(date +%Y --date="next year")
export TMPDIR=~/.gittmp
alias viewer="evince /svn/svnroot/tmp/cur.pdf 2>/dev/null & "
function ubig() {
mv "$tpath/vouchers/$(echo -n $(cat /tmp/curfn))" "$tpath/vouchers/ignored_$(echo -n $(cat /tmp/curfn))"
}
alias ub="bash /svn/svnroot/Applications/unused_vouchers.bash"
mkdir -p ~/.gittmp
function schedule() {
php /svn/svnroot/Applications/ol_time.php >/tmp/oltime.html;w3m /tmp/oltime.html -dump|less
}
function visbilag(){
ls *.trans|while read i; do 
	(
		jq .Reference "$i"
		jq .Ref "$i"
	)|grep -v CSV|grep -vi null|sed 's/"//g'; done|sort -n|less
}
function eh {
vim /svn/svnroot/Applications/key_help.txt
}
alias arkiverbilag="bash /svn/svnroot/Applications/arkiverbilag.bash"
function fb {
	bash /svn/svnroot/Applications/key_bilag.bash
}
function srb()
{
	export dbpath="$(find ~/Dropbox/*/Bilag/Incoming/ -type d|fzf --header 'FIND KUNDEMAPPE' )"
}

function csv() {
	lastsym 💾
	echo Starting CSV import
	php /svn/svnroot/Applications/key_csv.php load
	echo Loading possible account and func suggestions
	php /svn/svnroot/Applications/newl.php suggestions
	lastsym 🤖
	#php /svn/svnroot/Applications/newl.php openentries
	echo Applying rules if any - you can define rules with 'rule' or 'rule_copy'
	logic
	lastsym 🛸
}
function cvr() {
	php /svn/svnroot/Applications/cvr.php "$@"|less
}
alias rule="lastsym 📜;php /svn/svnroot/Applications/key_condgen.php"
function rule_copy() {
	cp $(ls ~/regnskaber/*/logic*|fzf -e --no-mouse --cycle) "$tpath"
}
function standardkontoplan() {
    bn=$(basename "$tpath")
    end=$LEDGER_BEGIN
    begin=$LEDGER_BEGIN
    php /svn/svnroot/Applications/skatexport.php > ~/tmp/stdkto.html
    google-chrome --headless ~/tmp/stdkto.html --print-to-pdf=Standard-export-$bn-$begin-$end.pdf 2>/dev/null
    mv Standard-export-$bn-$begin-$end.pdf ~/n4s-export/
}
function html2() {
	begin=$LEDGER_BEGIN
	end=$LEDGER_END
	bn=$(basename "$tpath")
	vim $tpath/.companyname.txt
	tmux new-window cmatrix
	tmux split-window -l 2 "bash /svn/svnroot/Applications/progressbar.bash;sleep 1"
	php /svn/svnroot/Applications/htmlreport.php > ~/tmp/out.html
	pushd . 2>/dev/null > /dev/null
	cd ~/tmp/
(
    google-chrome --headless out.html --print-to-pdf=Saldobalance-$bn-$begin-$end.pdf
    mv Saldobalance-$bn-$begin-$end.pdf ~/n4s-export
(	/svn/svnroot/Applications/removeblankpages.bash ~/n4s-export/Saldobalance-$bn-$begin-$end.pdf&)

    google-chrome --headless kontokort.html --print-to-pdf=Kontokort-$bn-$begin-$end.pdf

    mv Kontokort-$bn-$begin-$end.pdf ~/n4s-export
(	/svn/svnroot/Applications/removeblankpages.bash ~/n4s-export/Kontokort-$bn-$begin-$end.pdf &)

    google-chrome --headless nøgletal.html --print-to-pdf=Nøgletal-$bn-$begin-$end.pdf

    mv Nøgletal-$bn-$begin-$end.pdf ~/n4s-export
(	/svn/svnroot/Applications/removeblankpages.bash ~/n4s-export/Nøgletal-$bn-$begin-$end.pdf &)


    google-chrome --headless statistik.html --print-to-pdf=Lagkagediagrammer-$bn-$begin-$end.pdf
    mv Lagkagediagrammer-$bn-$begin-$end.pdf ~/n4s-export
(	/svn/svnroot/Applications/removeblankpages.bash ~/n4s-export/Lagkagediagrammer-$bn-$begin-$end.pdf &)


    google-chrome --headless moneyflow.html --print-to-pdf=Pengestrømme-$bn-$begin-$end.pdf
    mv Pengestrømme-$bn-$begin-$end.pdf ~/n4s-export
(	/svn/svnroot/Applications/removeblankpages.bash ~/n4s-export/Pengestrømme-$bn-$begin-$end.pdf &)


    google-chrome --headless manglendebilag.html --print-to-pdf=Manglendebilag-$bn-$begin-$end.pdf
    mv Manglendebilag-$bn-$begin-$end.pdf ~/n4s-export
	(/svn/svnroot/Applications/removeblankpages.bash ~/n4s-export/Manglendebilag-$bn-$begin-$end.pdf &)
) >/dev/null
	tmux new-window "LEDGER_BEGIN=$LEDGER_BEGIN LEDGER_END=$LEDGER_END tpath=$tpath php /svn/svnroot/Applications/nyfejl.php"

	popd 2>/dev/null > /dev/null
	killall cmatrix;clear
	echo "Please look for Your reports in ~/n4s-export"
}
function html() {
	html2 2>/dev/null
	return

	echo brug  html2 nu
	return
	mkdir -p /svn/svnroot/tmp 2>/dev/null
	output=~/tmp/htmloutput.html
	outputpdf=~/tmp/htmloutput.pdf
	echo generating html
	php /svn/svnroot/Applications/key_multiperiod.php $@ > "$output"
	#wkhtmltopdf --enable-internal-links toc "$output" "$outputpdf" 
	#echo generating pdf
	#(chromium --headless --disable-gpu --print-to-pdf="$outoutpdf" "file://$output") > /dev/null 2>/dev/null
	#cp "output.pdf" /svn/svnroot/Preview.pdf
	#mv "output.pdf" "$outputpdf"
	#evince "$outputpdf"
	bn=$(echo -n $(basename "$tpath"))
	begin=$LEDGER_BEGIN
	end=$LEDGER_END
	if [ -f "$tpath/.companyname.txt" ]; then
		cn="$(cat $tpath/.companyname.txt)"
		bn="$cn"
	fi
	id="$bn - Periode $begin - $end"
	if [ "$1" == "spec" ]; then
		id="$id (m-specs)"
	fi
	#echo id="$id"
	cp "$output" ~/tmp/"Resultat & Balance - $id.html"
	if [ -f ~/.svnrooturl ]; then
		url="$(cat ~/.svnrooturl)"
	else
		echo -n "indtast svnroot url (spørger kun 1 gang, tryk ENTER for offline): "
		read url
		if [ "$url" == "" ]; then
		echo "file:///svn/svnroot/" > ~/.svnrooturl
		else
		echo "$url" > ~/.svnrooturl
		fi
	fi
	echo "se $url/tmp/Resultat & Balance $id.html"
}
alias pdf=html
source /svn/svnroot/Applications/nicebal.bash
alias plot="bash /svn/svnroot/Applications/key_plot.bash"
alias plotg="png='set terminal png' bash /svn/svnroot/Applications/key_plot.bash $@ > /svn/svnroot/tmp/plotg.png"
alias inv="bash /svn/svnroot/Applications/invoice.bash"
source /svn/svnroot/Applications/code.bash
function c() {
	start=$(date +%s)
	bash /svn/svnroot/Applications/start.bash code
	end=$(date +%s)
	min=$(echo "scale=2;($end-$start)/60/60*2"|bc -l) #*2 = fordobling af minutter brugt, til tænketid og research 2023-03-21T17:02 joo	tænker det er et fornuftigt skøn
	ts=$(date "+%Y-%m-%dT%H:%M")
	mkdir -p /data/regnskaber
	fn=$(cat ~/tmp/.editcode)
	rm -rf ~/tmp/.editcode
	fn=$(echo "$fn"|sed 's/\/svn\/svnroot\///g')
	echo -e "$ts\t#n4s:#code:$fn\t$min" >> /data/regnskaber/stats/$(whoami).stats
}
basename=$(basename "$PWD")
export LC_ALL=da_DK.UTF-8
export LANG=$LC_ALL
export LANGUAGE=$LC_ALL
function update_title {
export TMUX_PANE_TITLE="$1"
 printf "\033]2;%s\033\\" "${1:-$TMUX_PANE_TITLE}"; }
# it is done here
function getcolor() {
	acc=$(echo "$1"|awk '{print $1}')
	if [ "$acc" == "Bank" ] || [ "$acc" == "Kasse" ]; then
		echo "#95eb34"
	else
		echo "#bec9b1"
	fi
}
prompt_function () {
cmd=$(fc -ln -0)
bn=$(basename "$tpath");
if [ ! -f  ~/.lastsym ]; then 
	touch ~/.lastsym 
fi
syms=$(cat ~/.lastsym|tail -c95)

update_title "#[bg=yellow]$cmd #[bg=blue]$LEDGER_BEGIN - $LEDGER_END"
if [ "$tpath" != "" ]; then
	showpath="#[fg=black,bg=white]$(basename "$tpath")"
else
	showpath=n4s
fi
tmux set -g pane-border-format "#[fg=black,bg=gray]$env$showpath#[fg=black,bg=orange]#T #[fg=black bg=gray]$syms" 2>/dev/null
if [ "$tpath" != "" ]; then
    if [ "$tpath" == "$PWD" ]; then
        if [ "$logging" == "on" ]; then
		mkdir -p $tpath/.logs/
            tmux capture-pane -pS - > $tpath/.logs/$(whoami)-$(date +%Y-%m-%dT%H:%M).log 2>/dev/null
        fi
    elif [ "$logging" == "on" ]; then
        export logging=off
        echo "Logging = off"
    fi
fi

bnpwd=$(basename "$PWD")
echo "$(whoami) $(date '+%Y-%m-%dT%H:%m') $bnpwd : $cmd" >> /data/regnskaber/.log
BPWD="$(basename "$PWD")"
	tips=$(shuf -n 1 /svn/svnroot/Libraries/tipsogtricks);
	diff3=$(grep $(date +%Y-%m-%d --date="-2 days") ~/regnskaber/*/.tags/*.diff 2>/dev/null|grep $(whoami) 2>/dev/null|wc -l 2>/dev/null)
	if [ -f /data/.custom ]; then
		custom=$(cat /data/.custom)
	fi
	if [ -f ~/.customtmux ]; then
		custom="$custom $(cat ~/.customtmux)"
	else
		custom="$custom 🐃#didyouknow You can customize this line with custom data in ~/.customtmux🐃"
	fi
	tmux set -g status-format[1] "#[fg=#71c242,bg=#0d2f9e]🐃$tips🐃" 2>/dev/null
	tmux set -g status 4 2>/dev/null; tmux set -g status-format[2] "#[fg=black,bg=#594a18] $custom" 2>/dev/null
	hist=$(history|tail -n10|sort --rev|while read i; do echo -n " $i"; done)
	tmux set -g status 4 2>/dev/null; tmux set -g status-format[3] "#[fg=black,bg=#26bd19]$hist" 2>/dev/null

	#last=$(grep -h ✔ /data/regnskaber/transactions_crm/.tags/*.diff|grep "\["|grep "\]"|sort|tail -n1)
    last=$(newfeatures)
	tmux set -g status 5 2>/dev/null; tmux set -g status-format[4] "#[fg=black,bg=#ebde34]$last" 2>/dev/null
	pushd . >/dev/null
	cd "$tpath"
	popd >/dev/null
time=$(date -Iseconds)
if [ "$tpath" != "" ]; then
	if [ "$tpath" == "$PWD" ]; then
		PS1="\[\e[1;32m\]$(echo $lenv)$time $(basename '$tpath')]\$\[\e[0m "
	else
		PS1="\[\e[1;32m\]$(echo $lenv)$time $(basename $tpath) / \W]\$\[\e[0m "
	fi
else
		
		PS1="\[\e[1;32m\]$(echo $lenv)$time n4sv$version / \W]\$\[\e[0m "
fi
}
PROMPT_COMMAND=prompt_function

if [[ -z $SVNROOT ]];then
    export SVNROOT=/svn/svnroot # default
fi
# Set the title string at the top of your current terminal window or terminal window tab
function s() {
	if [ "$1" == "" ]; then
		echo "s kræver søgefrase, f.eks. 's 2022-01 løn'"
		return
	fi
	echo "searching for $@  in $LEDGER_BEGIN - $LEDGER_END - use ss for searching in all time"
	php /svn/svnroot/Applications/key.php search $LEDGER_BEGIN $LEDGER_END "$@"
	lastsym 🔎
}
function ss() {
	if [ "$1" == "" ]; then
		echo "s kræver søgefrase, f.eks. 's 2022-01 løn'"
		return
	fi
	lastsym 🔬
	echo "searching for $@  in 1900-01-01 - 2019-12-31 - use s for searching only in $LEDGER_BEGIN - $LEDGER_END"
	php /svn/svnroot/Applications/key.php search 1900-01-01 2099-12-31 "$@" 
}
alias e="php /svn/svnroot/Applications/newl.php entry"
alias eu="php /svn/svnroot/Applications/key.php entry bilag"

unalias l 2>/dev/null #ubuntu default alias
function scrips() {
		ls -a /svn/svnroot/Applications/scrips/|fzf --multi --header="Vælg plugins"|while read choice
		do
			ln -s "/svn/svnroot/Applications/scrips/$choice" "$tpath"	
			php $choice kopieret - venligst kør dette script manuelt før du fortsætter hvis scriptet kræver konfiguration
			bash "$tpath/$choice"
			echo "Kørt $choice"
		done
}
function sr() {
lastsym 🖫
clear&&tmux clear-history
if [ -z "$1" ] ; then
	export tpath=~/regnskaber/$((echo NEW;ls -t ~/regnskaber)|fzf --no-mouse --cycle)
else
	export tpath=~/regnskaber/"$1"
fi
bn=$(basename "$tpath")
if [ "$bn" == "NEW" ]; then
	echo -n "New Account - Name: "
	read navn < /dev/tty
	navn=$(echo "$navn"| tr -cd '[:alnum:]._-'|sed 's/\ /_/g')
	if [ "$navn" != "" ]; then
		path=$(echo -e "/data/regnskaber\n/home/$(whoami)/regnskaber"|fzf --header="Chose Your Path")
		newfolder=$path/"$navn"
		mkdir -p "$newfolder"
		touch "$newfolder/aliases"
		tpath="$newfolder"
		bn=$(basename "$tpath")
        elif [ ! -f ~/regnskaber/"$bn" ]; then
		ln -s "$tpath" ~/regnskaber/"$bn"
        fi
fi
bn=$(basename "$tpath")
if [ "$nochange" != "1" ]; then
	tmux rename-window "$bn" 
fi
cd $tpath
if [ ! -f "curl" ]; then touch curl; fi
if [ $? -eq 0 ]; then
    sleep 0.01
else
    echo FAILED entering $tpath
	return 1
fi
LEDGER_BEGIN=$(date +%Y-01-01)
LEDGER_END=$(date +%Y-01-01 --date="+1 year")
if [ "$noperiod" != 1 ]; then
echo
dp
fi
echo "Opened $(basename "$tpath") OK "
echo $(tput setab 190)✌ Opened $tpath 
echo $(tput setab 190)✌ Full Log $logging
echo $(tput setab 190)✌ Accounting menu $(tput setab 190)Press Alt-m
echo
mkdir -p $tpath/.logs/

if [ -f .init.bash ]; then
    source .init.bash
fi
if [ ! -f aliases ]; then
    touch aliases
fi
}

bar_size=40
bar_char_done="#"
bar_char_todo="-"
bar_percentage_scale=1

function show_progress {
    current="$1"
    total="$2"
    tekst="$3"
    # calculate the progress in percentage 
    percent=$(bc <<< "scale=$bar_percentage_scale; 100 * $current / $total" )
    # The number of done and todo characters
    done=$(bc <<< "scale=0; $bar_size * $percent / 100" )
    todo=$(bc <<< "scale=0; $bar_size - $done" )

    # build the done and todo sub-bars
    done_sub_bar=$(printf "%${done}s" | tr " " "${bar_char_done}")
    todo_sub_bar=$(printf "%${todo}s" | tr " " "${bar_char_todo}")

    # output the bar
    echo -ne "\r$tekst: [${done_sub_bar}${todo_sub_bar}] ${percent}%"

    if [ $total -eq $current ]; then
        echo -e "\nDONE"
    fi
}

function sync() {
	bn=$(basename "$tpath")
	if [ ! -d "$tpath/.backup" ]; then
		echo "Opretter ny backup $bn"
		mkdir -p "$tpath/.backup"
		borg init --encryption=none "$tpath/.backup"
	fi	
	pushd . >/dev/null
	cd "$tpath/.backup"
	echo "Kører backup"
	borg create $tpath/.backup::$(date +%Y-%m-%d) $(realpath "$tpath") --stats 2>~/tmp/backup
	if [ $? -eq 0 ]; then
		echo "Backup dannet"
	else
		cat ~/tmp/backup
	fi
	popd >/dev/null
}

LEDGER_END=2099-12-31
LEDGER_BEGIN=1900-01-01
export DISPLAY=:1
# HSTR configuration - add this to ~/.bashrc
alias hh=hstr                    # hh to be alias for hstr
export HSTR_CONFIG=hicolor       # get more colors
shopt -s histappend              # append new history items to .bash_history
export HISTCONTROL=ignorespace   # leading space hides commands from history
export HISTFILESIZE=10000        # increase history file size (default is 500)
export HISTSIZE=${HISTFILESIZE}  # increase history size (default is 500)
# ensure synchronization between bash memory and history file
export PROMPT_COMMAND="history -a; history -n; ${PROMPT_COMMAND}"
# if this is interactive shell, then bind hstr to Ctrl-r (for Vi mode check doc)
if [[ $- =~ .*i.* ]]; then bind '"\C-r": "\C-a hstr -- \C-j"'; fi
# if this is interactive shell, then bind 'kill last command' to Ctrl-x k
if [[ $- =~ .*i.* ]]; then bind '"\C-xk": "\C-a hstr -k \C-j"'; fi
