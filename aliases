function lt() {
 vi $(realpath $tpath/.lasttrans )
}
function b() {
    tmux split-window -h "LEDGER_BEGIN=$LEDGER_BEGIN LEDGER_END=$LEDGER_END tpath=$tpath php /svn/svnroot/Applications/newl.php b $@|less"
}
function r() {
    tmux split-window -v "LEDGER_BEGIN=$LEDGER_BEGIN LEDGER_END=$LEDGER_END tpath=$tpath php /svn/svnroot/Applications/newl.php r $@|less"
}
alias fp=" python /svn/svnroot/Applications/fpaste/fpaste.py"
version=$(cd /svn/svnroot/;echo $(git log |wc -l)/1000|bc -l|perl -pe 's/ ^0+ | 0+$ //xg')
export TERM=xterm-256color tmux
export BORG_RELOCATED_REPO_ACCESS_IS_OK=y
function h() {
l r $@|head
}
function t() {
l r $@|tail
}
function kd() {
	cd ~/Dropbox/"$(ls ~/Dropbox|fzf)"
}
function i() {
	cd Bilag/Incoming
}
op=$(whoami)
alias p="tmux split -h \"w3m -dump /home/$op/tmp/ft.html|vi - \""
alias v="bash /svn/svnroot/Applications/viewpdf.bash $@"
alias 111="tmux send-keys 'l b ^Indtægter: ^Udgifter' Enter"
alias 320="tmux send-keys 'l b ^Indtægter:' Enter"
alias 115="tmux send-keys ' l b ^ind ^ud --depth=2' Enter 'python' Enter"
alias 325="tmux send-keys ' l b ^ind ^ud --depth=2' Enter 'python' Enter "
alias 326="tmux send-keys 'l b afskrivning' Enter"
alias 327="tmux send-keys ' l b ^ind ^ud --depth=2' Enter "
alias 123="tmux send-keys 'period=yearly ppivot Egenkapital:' Enter"
alias 331="tmux send-keys 'period=yearly ppivot Egenkapital:' Enter"
alias 124="tmux send-keys 'period=yearly ppivot Aktiver:' Enter"
alias 332="tmux send-keys 'period=yearly ppivot Aktiver:' Enter"
alias 356="tmux send-keys 'period=yearly ppivot Udgifter:Administration:Mindre' Enter"
alias 638="tmux send-keys 'period=yearly ppivot Passiver:Moms:' Enter"
alias aktiver="tmux send-keys 'period=yearly ppivot ^Aktiver:' Enter"
alias passiver="tmux send-keys 'period=yearly ppivot ^Passiver:' Enter"
alias udgifter="tmux send-keys 'period=yearly ppivot ^Udgifter:' Enter"
alias indtægter="tmux send-keys 'period=yearly ppivot ^Indtægter:' Enter"
alias egenkapital="tmux send-keys 'period=yearly ppivot ^Egenkapital:' Enter"

export LEDGER_SORT=date
alias pivot="bash /svn/svnroot/Applications/hpivot.bash $@"
alias ppivot="LEDGER_BEGIN=1970/1/1 LEGDER_END=2099/12/31 bash /svn/svnroot/Applications/hpivot.bash $@"

mkdir -p ~/n4s-sockets/
export TMUX_TMPDIR=~/n4s-sockets/
alias budget="bash /svn/svnroot/Applications/budget.bash"
transfer() {
    curl --progress-bar --upload-file "$1" https://transfer.sh/$(basename $1) | tee /dev/null;
}
export termcmd=terminal
function changetermcmd() {
	export termcmd=$(echo -e "display-popup -E\nterminal\nnew-window\nsplit-window -h\nsplit-window -v"|fzf --exact --height=9 --header="Vælg output")
}
export LEDGER_PAYEE_WIDTH=34
export LEDGER_ACCOUNT_WIDTH=36
export LEDGER_AMOUNT_WIDTH=12
export LEDGER_TOTAL_WIDTH=12

alias reconcile="php /svn/svnroot/Applications/recon.php"
alias debtorreport="/svn/svnroot/Applications/browsedebitors.bash"
function dp() {
	php /svn/svnroot/Applications/datepick.php
	source ~/tmp/.datepick
	end=$LEDGER_BEGIN
	begin=1970-01-01 
	#echo LEDGER_BEGIN=$begin LEDGER_END=$end noend=1 php /svn/svnroot/Applications/key.php ledger equity
	#LEDGER_BEGIN=$begin LEDGER_END=$end      noend=1 php /svn/svnroot/Applications/key.php ledger equity > $tpath/.Åbning_$end.ledger
    echo beregner åbning
    LEDGER_DEPTH=999 LEDGER_BEGIN=$begin LEDGER_END=$end noend=1 php /svn/svnroot/Applications/newl.php csv|php /svn/svnroot/Applications/calcopening.php
    echo færdig med åbning
}
function ds() {
	php /svn/svnroot/Applications/sortpick.php
	source ~/tmp/.sortpick
}
function m() {
	if [ "$tpath" != "" ]; then
		php /svn/svnroot/Applications/tmux/menu.php rmenu

	else
		echo "Kan ikke åbne menu før valg af regnskab. Skriv 'sr' for at vælge regnskab"
		return
	fi
}
function lm() {

	if [ "$tpath" != "" ]; then
		php /svn/svnroot/Applications/tmux/menu.php Ledger
		tmux display-popup -w 55 -h 12 -E "whiptail --inputbox Konto 7 50 > ~/tmp/whiptail.out"
		tmux send-keys "'$(echo -n $(cat ~/tmp/whiptail.out))' Enter"

	else
		echo "Kan ikke åbne menu før valg af regnskab. Skriv 'sr' for at vælge regnskab"
		return
	fi
}
bind '"\em":"m\n"' 2>/dev/null
bind '"\eå":"lm\n"' 2>/dev/null
bind '"\er":"r\n"' 2>/dev/null
bind '"\eb":"b\n"' 2>/dev/null
bind '"\ep":"dp\n"' 2>/dev/null
bind '"\es":"ds\n"' 2>/dev/null
bind '"\eq":"changetermcmd\n"' 2>/dev/null
shopt -s histappend
mkdir -p ~/tmp/ /svn/svnroot/tmp/
LEDGER_DEPTH=5
export FZF_DEFAULT_OPTS=" \
--color=bg+:#363a4f,bg:#24273a,spinner:#f4dbd6,hl:#ed8796 \
--color=fg:#cad3f5,header:#ed8796,info:#c6a0f6,pointer:#f4dbd6 \
--color=marker:#f4dbd6,fg+:#cad3f5,prompt:#c6a0f6,hl+:#ed8796"
function ti() {
	time=$(date +"%H:%m")
	#tmux set -g status-right "#[fg=white]# $time: $1"
}
function ww() {
tmux select-window -t $(tmux list-windows|fzf|awk '{print $1}'|sed 's/://g') 
}
logfile_o="/var/log/olsen"

source /svn/svnroot/Applications/key_tas.bash
function x() {
if [ "$STY" != "" ]; then
	echo du er allerede i en STY $STY
	return
fi
session=$((screen -ls|grep -v There" are"|grep -v Sockets;echo "NY")|fzf|awk '{print $1}')
if [ "$session" == "NY" ] || [ "$session" == "ny" ]; then
	#echo -n "Indtast ny aktivitets navn: "
	#read name
	tag=$(ls /home/joo/regnskaber/transactions_stuff/.tags/|fzf)
	#source /home/joo/regnskaber/transactions_stuff/.tags.bash
	#tag=$(tpath=/home/joo/regnskaber/transactions_stuff gettags|fzf)
	if [ "$tag" == "noter" ]; then
		screen -c $screenrc -S "noter" vi ~/Noter.txt
	else
		screen -c $screenrc -S "$tag" 
	fi
else
	if [[ "$session" =~ *"noter"* ]]; then
		screen -c $screenrc. -x $session 
	else
		screen -c $screenrc -x $session 
	fi
fi

}



function oll() {
(grep -i "$1" ~/t/*/1000" - "*
grep -i "$1" ~/pr/*/1000" - "*
grep -i "$1" ~/companies/*/1000" - "*
grep -i "$1" ~/p/*/1000" - "*
)|while read i; do 
	b=$(basename "$i"); 
	fn=$(echo -n "$i"|sed "s/$b//g"; echo -n "100000 - History")
	if [ -f "$fn" ]; then
		echo "### $fn ###"
		cat "$fn"
	fi
done|less
}
alias ta="task add" 
current_year=$(date +%Y)
next_year=$(date +%Y --date="next year")
export TMPDIR=~/.gittmp
alias viewer="evince /svn/svnroot/tmp/cur.pdf 2>/dev/null & "
function ubig() {
mv "$tpath/vouchers/$(echo -n $(cat /tmp/curfn))" "$tpath/vouchers/ignored_$(echo -n $(cat /tmp/curfn))"
}
alias ub="bash /svn/svnroot/Applications/unused_vouchers.bash"
mkdir -p ~/.gittmp
function schedule() {
php /svn/svnroot/Applications/ol_time.php >/tmp/oltime.html;w3m /tmp/oltime.html -dump|less
}
function visbilag(){
ls *.trans|while read i; do 
	(
		jq .Reference "$i"
		jq .Ref "$i"
	)|grep -v CSV|grep -vi null|sed 's/"//g'; done|sort -n|less
}
function eh {
vim /svn/svnroot/Applications/key_help.txt
}
alias arkiverbilag="bash /svn/svnroot/Applications/arkiverbilag.bash"
function fb {
	bash /svn/svnroot/Applications/key_bilag.bash
}
function srb()
{
	export dbpath="$(find ~/Dropbox/*/Bilag/Incoming/ -type d|fzf --header 'FIND KUNDEMAPPE' )"
}

alias csv="php /svn/svnroot/Applications/key_csv.php load"
alias pro="ol pr"
function olh() {
	opath=$(select_db)
headers=""
rm -rf ~/.curheader
cat ~/"$opath"/template/.headers|while read i
do
	echo -n "$i - " >> ~/.curheader
done
curheader=$(echo -n $(cat ~/.curheader)) 2>/dev/null
(ls ~/"$opath"/*/*" - "*|while read i; do basename "$i"; done|sort|uniq|opath=$opath fzf --reverse --multi --preview-window=down:1 --preview="echo Current: $curheader"|while read i; do 
	echo "$i"|awk '{print $1}'; 
done) > ~/"$opath/template/.headers"
}
function customers() {
ls ~/c|grep -v template|grep -v completed|while read i; do echo -n "$i - "; echo -n $(cat ~/c/$i/"1000 - "*);echo|head -n1; done|sort -n
}

alias csv="php /svn/svnroot/Applications/key_csv.php load"
function cvr() {
	php /svn/svnroot/Applications/cvr.php "$@"|less
}
function gsp (){
return
	#git diff "$tpath"
	#echo -n "Indtast kommentar til gemning: "
	#read kommentar </dev/tty
	#kommentar=autogem
	#pushd . >/dev/null;cd "$tpath";git add .;git commit -m "Gemt: $kommentar" -q . &&git push ;popd >/dev/null
}
alias rule="php /svn/svnroot/Applications/key_condgen.php"
function rule_copy() {
	cp $(ls ~/regnskaber/*/logic*|fzf -e --no-mouse --cycle) "$tpath"
}
function html2() {
	begin=$LEDGER_BEGIN
	end=$LEDGER_END
	bn=$(basename "$tpath")
	vim $tpath/.companyname.txt
	php /svn/svnroot/Applications/htmlreport.php > ~/tmp/out.html
	pushd . 2>/dev/null > /dev/null
	cd ~/tmp/
    google-chrome --headless out.html --print-to-pdf=Saldobalance-$bn-$begin-$end.pdf
	/svn/svnroot/Applications/removeblankpages.bash Saldobalance-$bn-$begin-$end.pdf
    mv Saldobalance-$bn-$begin-$end.pdf ~/n4s-export

    google-chrome --headless kontokort.html --print-to-pdf=Kontokort-$bn-$begin-$end.pdf
	/svn/svnroot/Applications/removeblankpages.bash Kontokort-$bn-$begin-$end.pdf
    mv Kontokort-$bn-$begin-$end.pdf ~/n4s-export

    google-chrome --headless nøgletal.html --print-to-pdf=Nøgletal-$bn-$begin-$end.pdf
	/svn/svnroot/Applications/removeblankpages.bash Nøgletal-$bn-$begin-$end.pdf 
    mv Nøgletal-$bn-$begin-$end.pdf ~/n4s-export


    google-chrome --headless statistik.html --print-to-pdf=Lagkagediagrammer-$bn-$begin-$end.pdf
	/svn/svnroot/Applications/removeblankpages.bash Lagkagediagrammer-$bn-$begin-$end.pdf 
    mv Lagkagediagrammer-$bn-$begin-$end.pdf ~/n4s-export


    google-chrome --headless manglendebilag.html --print-to-pdf=Manglendebilag-$bn-$begin-$end.pdf
	/svn/svnroot/Applications/removeblankpages.bash Manglendebilag-$bn-$begin-$end.pdf 
    mv Manglendebilag-$bn-$begin-$end.pdf ~/n4s-export

	popd 2>/dev/null > /dev/null
}
function html() {
	html2 2>/dev/null
	return

	echo brug  html2 nu
	return
	mkdir -p /svn/svnroot/tmp 2>/dev/null
	output=~/tmp/htmloutput.html
	outputpdf=~/tmp/htmloutput.pdf
	echo generating html
	php /svn/svnroot/Applications/key_multiperiod.php $@ > "$output"
	#wkhtmltopdf --enable-internal-links toc "$output" "$outputpdf" 
	#echo generating pdf
	#(chromium --headless --disable-gpu --print-to-pdf="$outoutpdf" "file://$output") > /dev/null 2>/dev/null
	#cp "output.pdf" /svn/svnroot/Preview.pdf
	#mv "output.pdf" "$outputpdf"
	#evince "$outputpdf"
	bn=$(echo -n $(basename "$tpath"))
	begin=$LEDGER_BEGIN
	end=$LEDGER_END
	if [ -f "$tpath/.companyname.txt" ]; then
		cn="$(cat $tpath/.companyname.txt)"
		bn="$cn"
	fi
	id="$bn - Periode $begin - $end"
	if [ "$1" == "spec" ]; then
		id="$id (m-specs)"
	fi
	#echo id="$id"
	cp "$output" ~/tmp/"Resultat & Balance - $id.html"
	if [ -f ~/.svnrooturl ]; then
		url="$(cat ~/.svnrooturl)"
	else
		echo -n "indtast svnroot url (spørger kun 1 gang, tryk ENTER for offline): "
		read url
		if [ "$url" == "" ]; then
		echo "file:///svn/svnroot/" > ~/.svnrooturl
		else
		echo "$url" > ~/.svnrooturl
		fi
	fi
	echo "se $url/tmp/Resultat & Balance $id.html"
}
alias li="bash /svn/svnroot/Applications/key_massupdate.bash"
export simple=1
source /svn/svnroot/Applications/nicebal.bash
alias plot="bash /svn/svnroot/Applications/key_plot.bash"
alias plotg="png='set terminal png' bash /svn/svnroot/Applications/key_plot.bash $@ > /svn/svnroot/tmp/plotg.png"
alias se="php /svn/svnroot/Applications/key.php search_expression"
alias inv="bash /svn/svnroot/Applications/invoice.bash"
source /svn/svnroot/Applications/code.bash
function c() {
	start=$(date +%s)
	bash /svn/svnroot/Applications/start.bash code
	end=$(date +%s)
	min=$(echo "scale=2;($end-$start)/60/60*2"|bc -l) #*2 = fordobling af minutter brugt, til tænketid og research 2023-03-21T17:02 joo	tænker det er et fornuftigt skøn
	ts=$(date "+%Y-%m-%dT%H:%M")
	mkdir -p /data/regnskaber
	fn=$(cat ~/tmp/.editcode)
	rm -rf ~/tmp/.editcode
	fn=$(echo "$fn"|sed 's/\/svn\/svnroot\///g')
	echo -e "$ts\t#n4s:#code:$fn\t$min" >> /data/regnskaber/stats/$(whoami).stats
}
basename=$(basename "$PWD")
export LC_ALL=da_DK.UTF-8
export LANG=$LC_ALL
export LANGUAGE=$LC_ALL
function update_title {
export TMUX_PANE_TITLE="$1"
 printf "\033]2;%s\033\\" "${1:-$TMUX_PANE_TITLE}"; }
# it is done here
function getcolor() {
	acc=$(echo "$1"|awk '{print $1}')
	if [ "$acc" == "Bank" ] || [ "$acc" == "Kasse" ]; then
		echo "#95eb34"
	else
		echo "#bec9b1"
	fi
}
prompt_function () {
cmd=$(fc -ln -0)
bn=$(basename "$tpath");
update_title "#[bg=yellow]$cmd #[bg=blue]$LEDGER_BEGIN - $LEDGER_END"
if [ "$tpath" != "" ]; then
	showpath="#[fg=black,bg=white]$(basename "$tpath")"
else
	showpath=n4s
fi
tmux set -g pane-border-format "#[fg=black,bg=gray]$env$showpath#[fg=black,bg=orange]#T"


bnpwd=$(basename "$PWD")
echo "$(whoami) $(date '+%Y-%m-%dT%H:%m') $bnpwd : $cmd" >> /data/regnskaber/.log
BPWD="$(basename "$PWD")"
	tips=$(shuf -n 1 /svn/svnroot/Libraries/tipsogtricks);
	diff3=$(grep $(date +%Y-%m-%d --date="-2 days") ~/regnskaber/*/.tags/*.diff 2>/dev/null|grep $(whoami) 2>/dev/null|wc -l 2>/dev/null)
	tmux set -g status 2 2>/dev/null; tmux set -g status-format[1] "#[fg=black,bg=#f5ce42]🐃 Vidste du at: 🐃 $tips#[fg=colour50,bg=colour95]" 2>/dev/null
	tmux set-option status-right "#[fg=black,bg=white] $params %Y-%m-%dT%H:%M #[fg=colour233,bg=colour8]n4s v$version"
	pushd . >/dev/null
	cd "$tpath"
	popd >/dev/null
if [ "$tpath" != "" ]; then
	if [ "$tpath" == "$PWD" ]; then
		PS1="\[\e[1;32m\]$(echo $lenv)$(basename '$tpath')]\$\[\e[0m "
	else
		PS1="\[\e[1;32m\]$(echo $lenv)$(basename $tpath) / \W]\$\[\e[0m "
	fi
fi
}
PROMPT_COMMAND=prompt_function

if [[ -z $SVNROOT ]];then
    export SVNROOT=/svn/svnroot # default
fi
# Set the title string at the top of your current terminal window or terminal window tab
function s() {
	if [ "$1" == "" ]; then
		echo "s kræver søgefrase, f.eks. 's 2022-01 løn'"
		return
	fi
	echo "searching for $@  in $LEDGER_BEGIN - $LEDGER_END - use ss for searching in all time"
	php /svn/svnroot/Applications/key.php search $LEDGER_BEGIN $LEDGER_END "$@"
}
function ss() {
	if [ "$1" == "" ]; then
		echo "s kræver søgefrase, f.eks. 's 2022-01 løn'"
		return
	fi
	echo "searching for $@  in 1970-01-01 - 2019-12-31 - use s for searching only in $LEDGER_BEGIN - $LEDGER_END"
	php /svn/svnroot/Applications/key.php search 1970-01-01 2099-12-31 "$@" 
}
alias e="php /svn/svnroot/Applications/newl.php entry"
alias eu="php /svn/svnroot/Applications/key.php entry bilag"

unalias l 2>/dev/null #ubuntu default alias
source /svn/svnroot/Libraries/aliases
function scrips() {
		ls -a /svn/svnroot/Applications/scrips/|fzf --multi --header="Vælg plugins"|while read choice
		do
			ln -s "/svn/svnroot/Applications/scrips/$choice" "$tpath"	
			php $choice kopieret - venligst kør dette script manuelt før du fortsætter hvis scriptet kræver konfiguration
			bash "$tpath/$choice"
			echo "Kørt $choice"
		done
}
function sr() {
if [ -z "$1" ] ; then
	export tpath=~/regnskaber/$((echo NY;ls -t ~/regnskaber)|fzf --no-mouse --cycle)
else
	export tpath=~/regnskaber/"$1"
fi
bn=$(basename "$tpath")
if [ "$bn" == "NY" ]; then
	echo -n "Nyt regnskab - Navn: "
	read navn < /dev/tty
	navn=$(echo "$navn"| tr -cd '[:alnum:]._-'|sed 's/\ /_/g')
	if [ "$navn" != "" ]; then
		if [ ! -f "/svn/svnroot/pubserver" ]; then
			newfolder=/data/regnskaber/"$navn"
		else
			newfolder=~/regnskaber/"$navn"
		fi
			mkdir -p "$newfolder"
			tpath="$newfolder"
			bn=$(basename "$tpath")
		ln -s "$tpath" ~/regnskaber/"$bn"
		cp /svn/svnroot/Applications/scrips/999_Periodresult.bash "$tpath/"
	fi
fi
bn=$(basename "$tpath")
if [ "$nochange" != "1" ]; then
	tmux rename-window "#[bg=darkblue]$bn" 
fi
cd $tpath
if [ ! -f "curl" ]; then touch curl; fi
if [ $? -eq 0 ]; then
    sleep 0.01
else
    echo FAILED entering $tpath
	return 1
fi
LEDGER_BEGIN=$(date +%Y-01-01)
LEDGER_END=$(date +%Y-01-01 --date="+1 year")
echo -e "\e[42mÅbnet $(basename "$tpath") OK - Tryk Alt-m eller skriv 'm' [Enter] \e[0m"
echo -e "\e[45Start med at skrive 'dp' tak !\e[0m"
}
function saveconf() {
	if [ "$tpath" == "" ]; then
		#echo saveconf error tpath=$tpath - error
		return
	fi
    fn="$tpath/config.bash";
    echo "simple=$simple" > $fn;
	env|grep LEDGER_|while read ldg
	do
	echo "$ldg" >> $fn
	done
	#chmod 777 "$fn"

}


bar_size=40
bar_char_done="#"
bar_char_todo="-"
bar_percentage_scale=1

function show_progress {
    current="$1"
    total="$2"
    tekst="$3"
    # calculate the progress in percentage 
    percent=$(bc <<< "scale=$bar_percentage_scale; 100 * $current / $total" )
    # The number of done and todo characters
    done=$(bc <<< "scale=0; $bar_size * $percent / 100" )
    todo=$(bc <<< "scale=0; $bar_size - $done" )

    # build the done and todo sub-bars
    done_sub_bar=$(printf "%${done}s" | tr " " "${bar_char_done}")
    todo_sub_bar=$(printf "%${todo}s" | tr " " "${bar_char_todo}")

    # output the bar
    echo -ne "\r$tekst: [${done_sub_bar}${todo_sub_bar}] ${percent}%"

    if [ $total -eq $current ]; then
        echo -e "\nDONE"
    fi
}

function sync() {
	bn=$(basename "$tpath")
	if [ ! -d "$tpath/.backup" ]; then
		echo "Opretter ny backup $bn"
		mkdir -p "$tpath/.backup"
		borg init --encryption=none "$tpath/.backup"
	fi	
	pushd . >/dev/null
	cd "$tpath/.backup"
	echo "Kører backup"
	borg create $tpath/.backup::$(date +%Y-%m-%d) $(realpath "$tpath") --stats 2>~/tmp/backup
	if [ $? -eq 0 ]; then
		echo "Backup dannet"
	else
		cat ~/tmp/backup
	fi
	popd >/dev/null
}

echo "Velkommen til n4s - tryk F1 for at aktivere hovedmenu"
LEDGER_END=2099/12/31
LEDGER_BEGIN=1970/01/01
